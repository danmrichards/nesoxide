use std::cell::RefCell;
use std::rc::Rc;

use crate::apu::Apu;
use crate::cartridge::Cartridge;
use crate::cpu::Memory;
use crate::joypad::Joypad;
use crate::ppu::NesPpu;
use crate::ppu::Ppu;

use super::PPUBus;

/// | Address range | Size  | Device                                                                  |
/// | ------------- | ----- | ----------------------------------------------------------------------- |
/// | $0000-$07FF   | $0800 | 2KB internal RAM                                                        |
/// | $0800-$0FFF   | $0800 | Mirrors of $0000-$07FF                                                  |
/// | $1000-$17FF   | $0800 |                                                                         |
/// | $1800-$1FFF   | $0800 |                                                                         |
/// | $2000-$2007   | $0008 | NES PPU registers                                                       |
/// | $2008-$3FFF   | $1FF8 | Mirrors of $2000-2007 (repeats every 8 bytes)                           |
/// | $4000-$4017   | $0018 | NES APU and I/O registers                                               |
/// | $4018-$401F   | $0008 | APU and I/O functionality that is normally disabled. See CPU Test Mode. |
/// | $4020-$FFFF   | $BFE0 | Cartridge space: PRG ROM, PRG RAM, and mapper registers (See Note)      |
const RAM: u16 = 0x0000;
const RAM_MIRRORS_END: u16 = 0x1FFF;
const PPU_REGISTERS: u16 = 0x2000;
const PPU_REGISTERS_MIRRORS_END: u16 = 0x3FFF;

const PRG: u16 = 0x4020;
const PRG_END: u16 = 0xFFFF;

const APU_REGISTERS: u16 = 0x4000;
const APU_REGISTERS_END: u16 = 0x4013;
const APU_STATUS: u16 = 0x4015;
const APU_CHAN_ENABLE: u16 = 0x4015;
const APU_FRAME_COUNTER: u16 = 0x4017;

/// Delay betwen samples produced by the APU.
const APU_SAMPLE_DELAY: f32 = 1.0 / 1789773.0;

/// SystemBus abstracts a single location for data read/write, interrupts,
/// memory mapping and PPU/CPU clock cycles.
pub struct SystemBus<'a> {
    ram: [u8; 2048],
    cart: Rc<RefCell<Cartridge>>,
    ppu: NesPpu<'a>,
    pub joypad1: Joypad,

    apu: Apu,
    apu_interval: f32,
    apu_sample_time: f32,
    apu_samples: Vec<f32>,
}

impl<'a> SystemBus<'a> {
    /// Returns an instantiated Bus.
    pub fn new<F>(cart: Rc<RefCell<Cartridge>>, audio_sample_rate: f32, render_callback: F) -> Self
    where
        F: FnMut(&[u8]) + 'a,
    {
        let ppu_bus = PPUBus::new(Rc::clone(&cart));
        let ppu = NesPpu::new(Box::new(ppu_bus), Box::new(render_callback));

        SystemBus {
            ram: [0; 2048],
            cart,
            ppu,
            joypad1: Joypad::new(),

            apu: Apu::new(audio_sample_rate),
            apu_interval: 0.0,
            apu_sample_time: 1.0 / audio_sample_rate,
            apu_samples: Vec::new(),
        }
    }

    /// Updates the APU DMC chanel with a new sample if it needs one.
    fn update_dmc_sample(&mut self) {
        if self.apu.need_dmc_sample() {
            let addr = self.apu.dmc_sample_address();
            let sample = self.mem_read_byte(addr);

            self.apu.set_dmc_sample(sample);

            self.tick(4);
        }
    }

    /// For every CPU tick, run the PPU and APU appropriately.
    pub fn tick(&mut self, cycles: u8) {
        for _ in 0..cycles {
            // PPU runs three times faster than CPU.
            for _ in 0..3 {
                self.ppu.clock();
            }

            // The APU runs at the same speed as the CPU.
            self.apu.clock();
            self.update_dmc_sample();

            // Ensure the APU stays in sync.
            self.apu_interval += APU_SAMPLE_DELAY;

            if self.apu_interval >= self.apu_sample_time {
                self.apu_interval -= self.apu_sample_time;

                let sample = self.apu.output();
                self.apu_samples.push(sample);
            }
        }
    }

    /// Returns the NMI status of the PPU.
    pub fn nmi_status(&mut self) -> bool {
        self.ppu.poll_nmi()
    }

    /// Returns the number of rendered frames from the PPU.
    pub fn ppu_frame_count(&self) -> u128 {
        self.ppu.read_frame_count()
    }

    /// Returns the audio samples generated by the APU.
    pub fn audio_samples(&mut self) -> Vec<f32> {
        std::mem::take(self.apu_samples.as_mut())
    }
}

impl Memory for SystemBus<'_> {
    fn mem_read_byte(&mut self, addr: u16) -> u8 {
        match addr {
            RAM..=RAM_MIRRORS_END => {
                let mirror_down_addr = addr & 0b00000111_11111111;
                self.ram[mirror_down_addr as usize]
            }
            PPU_REGISTERS | 0x2001 | 0x2003 | 0x2005 | 0x2006 | 0x4014 => 0,
            0x2002 => self.ppu.read_status(),
            0x2004 => self.ppu.read_oam_data(),
            0x2007 => self.ppu.read_data(),

            APU_REGISTERS..=APU_REGISTERS_END | APU_STATUS => self.apu.read(addr),

            0x4016 => self.joypad1.read(),

            0x4017 => {
                // ignore joypad 2
                0
            }
            0x2008..=PPU_REGISTERS_MIRRORS_END => {
                let mirror_down_addr = addr & 0b00100000_00000111;
                self.mem_read_byte(mirror_down_addr)
            }
            PRG..=PRG_END => self.cart.borrow().read_prg(addr),

            _ => 0,
        }
    }

    fn mem_write_byte(&mut self, addr: u16, data: u8) {
        self.ppu.refresh_open_bus(data);

        match addr {
            RAM..=RAM_MIRRORS_END => {
                let mirror_down_addr = addr & 0b11111111111;
                self.ram[mirror_down_addr as usize] = data;
            }
            PPU_REGISTERS => {
                self.ppu.write_ctrl(data);
            }

            0x2001 => {
                self.ppu.write_mask(data);
            }
            0x2002 => panic!("attempt to write to PPU status register"),

            0x2003 => {
                self.ppu.write_oam_addr(data);
            }
            0x2004 => {
                self.ppu.write_oam_data(data);
            }
            0x2005 => {
                self.ppu.write_scroll(data);
            }
            0x2006 => {
                self.ppu.write_addr(data);
            }
            0x2007 => {
                self.ppu.write_data(data);
            }
            0x2008..=PPU_REGISTERS_MIRRORS_END => {
                let mirror_down_addr = addr & 0b00100000_00000111;
                self.mem_write_byte(mirror_down_addr, data);
            }

            APU_REGISTERS..=APU_REGISTERS_END | APU_CHAN_ENABLE | APU_FRAME_COUNTER => {
                self.apu.write(addr, data)
            }

            0x4014 => {
                let mut buffer: [u8; 256] = [0; 256];
                let hi: u16 = (data as u16) << 8;
                for i in 0..256u16 {
                    buffer[i as usize] = self.mem_read_byte(hi + i);
                }

                self.ppu.write_oam_dma(&buffer);

                // DMC can need a new sample during DMA.
                //
                // See: https://www.nesdev.org/wiki/APU_DMC
                self.update_dmc_sample();
            }
            0x4016 => {
                self.joypad1.write(data);
            }

            PRG..=PRG_END => self.cart.borrow_mut().write_prg(addr, data),

            _ => unreachable!("unreachable write at: {}", addr),
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::cartridge::tests::test_cartridge;

    use super::*;

    #[test]
    fn test_mem_read_write_to_ram() {
        let cart = test_cartridge(vec![], None).unwrap();

        let mut bus = SystemBus::new(Rc::new(RefCell::new(cart)), 44100.0, |_| {});
        bus.mem_write_byte(0x01, 0x55);
        assert_eq!(bus.mem_read_byte(0x01), 0x55);
    }
}
